#!/usr/bin/env bash

# Configuration
TERMINAL="xfce4-terminal --title=Progressbar --hide-borders"
TERMINAL+=" --geometry={c}x{r}+0+0 --zoom={z} -x"
DONE_COMMAND=()

# Constants
TIME_REG="(0?[0-9]|1[0-9]|2[0-3])(:(0?[0-9]|[1-5][0-9])(:(0?[0-9]|[1-5][0-9]))?)?"
BLOCKS=(" " "▏" "▎" "▍" "▌" "▋" "▊" "▉")

# Main function
main() {
  # Parse parameters
  local params; params="$(
    getopt -q -o r:c:z:m:h -l rows:,cols:,zoom:,margin:,help -- "$@"
  )" || abort 10 "Invalid options"
  eval set -- "$params"

  # Get options
  local rows=2 cols=80 zoom=0 margin
  while [[ "$1" != "--" ]]; do
    case "$1" in
      -r | --rows   ) shift; rows="$1";;
      -c | --cols   ) shift; cols="$1";;
      -z | --zoom   ) shift; zoom="$1";;
      -m | --margin ) shift; margin="$1";;
      -h | --help   ) usage; exit;;
    esac
    shift
  done
  shift

  # Validate options
  [[ "$rows" =~ ^[2-9]|[1-9][0-9]+$ ]] ||
    abort 20 "Rows must be integer greater or equal to two"
  [[ "$cols" =~ ^[4-9]|[1-9][0-9]+$ ]] ||
    abort 20 "Cols must be integer greater or equal to four"
  [[ "$zoom" =~ ^(-|\+)?[0-7]$ ]] ||
    abort 20 "Zoom must be integer between -7 and 7"
  [[ ! -v margin || "$margin" =~ ^0|[1-9][0-9]*$ ]] ||
    abort 20 "Margin must be a non-negative integer"

  # Start in terminal if not already in one
  if [[ ! -t 1 ]]; then
    start_terminal "$rows" "$cols" "$zoom" "$0" "$@"
  fi

  # Adapt margin if requested
  if [[ -v margin ]]; then
    adjust_margin "$margin" &
    trap "kill $!" EXIT
  fi

  # Get time specification
  local spec interactive
  if (( $# == 0 )); then
    interactive=true
  else
    interactive=false
    spec=("$@")
  fi

  # Program loop
  while true; do
    # Read timestamps from user if interactive
    if $interactive; then
      read -rep "Time range: " -a spec
      [[ "${spec[*]}" =~ ^exit|quit$ ]] && break
      history -s "${spec[*]}"
    fi

    # Get timestamps
    local timestamps; timestamps=( $(get_timestamps "${spec[@]}") )
    case "$?" in
      101 )
        echo >&2 "[Error] Invalid time range specification"
        $interactive && continue || exit 25;;
      100 )
        echo >&2 "[Error] Exactly one or two parameters expected";
        $interactive && continue || exit 25;;
      0   ) ;;
      *   ) exit "$?";;
    esac

    # Countdown
    countdown "${timestamps[0]}" "${timestamps[1]}"

    # Only loop if interactive
    $interactive || break
  done
}

# Get times
get_timestamps() {
  # Validate parameter count
  (( $# == 1 || $# == 2 )) || return 100

  # Get start time
  local start
  if (( $# == 2 )); then
    # Validate start parameter format
    [[ "$1" =~ ^$TIME_REG$ ]] || return 101

    # Set to given time
    start="$(date +%s -d "$1")" || abort 50 "Converting time failed"
    shift
  else
    # Set to current time
    start="$(date +%s)" || abort 50 "Getting current time failed"
  fi

  # Validate end parameter format
  [[ "$1" =~ ^\+?$TIME_REG$ ]] || return 101

  # Set absolute or relative end time
  local end
  if [[ "$1" =~ ^\+ ]]; then
    end="$(( start + "$(date +%s -d "${1:1}")" - "$(date +%s -d 0)" ))" ||
      abort 50 "Converting time failed"
  else
    end="$(date +%s -d "$1")" || abort 50 "Converting time failed"
    if (( end < start )); then
      end="$(date +%s -d "tomorrow $1")" || abort 50 "Calculating time failed"
    fi
  fi

  # Return times
  echo "$start" "$end"
}

# Count down
countdown() { local start="$1" end="$2"
  # Save terminal content
  tput smcup
  trap "tput rmcup" EXIT

  # Calculate total time
  local total="$(( end - start ))"

  # Print every second
  local cd_done=false
  while true; do
    # Calculate time left
    local now; now="$(date +%s)" || abort 50 "Getting current time failed"
    local left="$(( end - now ))"

    # Stop at zero and execute specified command
    if (( left <= 0 )); then
      left=0
      if ! $cd_done && (( ${#DONE_COMMAND[@]} > 0 )); then
        "${DONE_COMMAND[@]}" &
      fi
      cd_done=true
    fi

    # Draw progressbar
    draw "$left" "$total"

    # Wait for one second but abort countdown on q or esc
    read -rst 1 -n 1 input
    [[ "$input" == $'\e' || "$input" == "q" ]] && break
  done

  # Restore terminal content
  trap - EXIT
  tput rmcup
}

# Draw progressbar
draw() { local left="$1" total="$2"
  # Get terminal dimensions
  local w; w="$(tput cols)" || abort 40 "Getting terminal dimensions failed"
  local h; h="$(tput lines)" || abort 40 "Getting terminal dimensions failed"

  # Get progress bar cell width and color
  local cells="$(( w * left / total ))"
  (( cells > w )) && cells="$w"
  local mod="$(( (8 * w * left / total) % 8 ))"

  # Get color
  local color;
  if    (( left * 2   >= total )); then color="1;32";
  elif  (( left * 10  >= total )); then color="1;33";
  else                                  color="1;31";
  fi
  
  # Draw progress bar
  local screen="\e[${color}m"
  for (( r = 1; r <= h; r++ )); do
    for (( c = 1; c <= w; c++ )); do
      if (( r - 1 == (h - 1) / 2 && c - 1 == w / 2 - 4 )); then
        screen+="$(date +%H:%M:%S -ud @$left)" ||
          abort 50 "Formatting time failed"
        let c+=7
      elif (( c <= cells     )); then screen+="█"
      elif (( c == cells + 1 )); then screen+="${BLOCKS[mod]}"
      else                            screen+=" "
      fi
    done
    (( c < w )) && screen+="\n"
  done
  screen+="\e[0m"
  tput cup 0 0
  echo -ne "$screen"
}

# Start terminal
start_terminal() { local rows="$1" cols="$2" zoom="$3"; shift 3
  # Construct terminal command
  local command="$TERMINAL"
  command="${command//"{r}"/$rows}"
  command="${command//"{c}"/$cols}"
  command="${command//"{z}"/$zoom}"

  # Execute command
  exec $command "$@" || abort 30 "Starting terminal failed"
}

# Adjust desktop margin
adjust_margin() { local margin="$1"
  # Get current state
  local desktop; desktop="$(
    xprop -root _NET_CURRENT_DESKTOP | cut -d' ' -f3
  )" || abort 60 "Getting current desktop failed"
  local default_margin; default_margin="$(
    xfconf-query -c xfwm4 -p /general/margin_top
  )" || abort 60 "Getting current margin failed"

  # Reset margin before exiting
  trap "xfconf-query -c xfwm4 -p /general/margin_top -s $default_margin" EXIT

  # Adapt margin based on current desktop
  xprop -spy -root _NET_CURRENT_DESKTOP | # Subscribe to desktop switching
    stdbuf -o0 cut -d' ' -f3 |            # Extract desktop number
    while read -r d; do             # React to desktop switches
      if (( d == desktop )); then
        xfconf-query -c xfwm4 -p /general/margin_top -s $margin ||
          abort 70 "Setting desktop margin failed"
      else
        xfconf-query -c xfwm4 -p /general/margin_top -s $default_margin ||
          abort 70 "Setting desktop margin failed"
      fi
    done
}

# Print usage info
usage() {
cat <<END
Usage: progressbar [-r ROWS] [-c COLS] [-z ZOOM] [-m MARGIN] [-h] [[START] END] 
 -r, --rows     Set height of the terminal if opening one
 -c, --cols     Set width of the terminal if opening one
 -z, --zoom     Set zoom of the terminal if opening one
 -m, --margin   Automatically adapt desktop margin on current desktop (XFCE)
 -h, --help     Show this help and exit

Counts down to END, showing a graphical progressbar until q or esc is pressed.

The optional START parameter takes the form HOURS[:MINS[:SECS]]. If it is not
specified, the current time is used.

The END parameter takes the form [+]HOURS[:MINS[:SECS]]. With the leading plus,
it is interpreted as an offset relative to the START time. Without the leading
plus, it is interpreted as a time of day.

If no parameters are specified, the program runs in interactive mode and
prompts the user for time specifications until they enter "exit" or "quit".

The program checks if it is running in a terminal at startup and starts itself
in an xfce4-terminal, if it doesn't. Feel free to specify another terminal
emulator in the TERMINAL variable at the top of the program code.

If you would like the program to execute some command when the countdown
reaches zero, feel free to write it into the DONE_COMMAND array at the top of
the script.
END
}

# Exit with error
abort() { echo >&2 "[Error] $2"; exit $1; }

# Call main function
main "$@"
